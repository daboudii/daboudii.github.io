import {
  ImageState_default
} from "./chunk-5TDNKDLD.js";
import {
  IMAGE_DECODE
} from "./chunk-ZHG2RUY5.js";
import {
  abstract
} from "./chunk-GUTYMXLY.js";
import {
  EventType_default,
  Target_default,
  listenOnce,
  unlistenByKey
} from "./chunk-ZDO3UNMI.js";
import {
  getHeight
} from "./chunk-UPRWP4EN.js";

// node_modules/ol/ImageBase.js
var ImageBase = class extends Target_default {
  constructor(extent, resolution, pixelRatio, state) {
    super();
    this.extent = extent;
    this.pixelRatio_ = pixelRatio;
    this.resolution = resolution;
    this.state = state;
  }
  changed() {
    this.dispatchEvent(EventType_default.CHANGE);
  }
  getExtent() {
    return this.extent;
  }
  getImage() {
    return abstract();
  }
  getPixelRatio() {
    return this.pixelRatio_;
  }
  getResolution() {
    return this.resolution;
  }
  getState() {
    return this.state;
  }
  load() {
    abstract();
  }
};
var ImageBase_default = ImageBase;

// node_modules/ol/Image.js
var ImageWrapper = class extends ImageBase_default {
  constructor(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {
    super(extent, resolution, pixelRatio, ImageState_default.IDLE);
    this.src_ = src;
    this.image_ = new Image();
    if (crossOrigin !== null) {
      this.image_.crossOrigin = crossOrigin;
    }
    this.unlisten_ = null;
    this.state = ImageState_default.IDLE;
    this.imageLoadFunction_ = imageLoadFunction;
  }
  getImage() {
    return this.image_;
  }
  handleImageError_() {
    this.state = ImageState_default.ERROR;
    this.unlistenImage_();
    this.changed();
  }
  handleImageLoad_() {
    if (this.resolution === void 0) {
      this.resolution = getHeight(this.extent) / this.image_.height;
    }
    this.state = ImageState_default.LOADED;
    this.unlistenImage_();
    this.changed();
  }
  load() {
    if (this.state == ImageState_default.IDLE || this.state == ImageState_default.ERROR) {
      this.state = ImageState_default.LOADING;
      this.changed();
      this.imageLoadFunction_(this, this.src_);
      this.unlisten_ = listenImage(
        this.image_,
        this.handleImageLoad_.bind(this),
        this.handleImageError_.bind(this)
      );
    }
  }
  setImage(image) {
    this.image_ = image;
    this.resolution = getHeight(this.extent) / this.image_.height;
  }
  unlistenImage_() {
    if (this.unlisten_) {
      this.unlisten_();
      this.unlisten_ = null;
    }
  }
};
function listenImage(image, loadHandler, errorHandler) {
  const img = image;
  let listening = true;
  let decoding = false;
  let loaded = false;
  const listenerKeys = [
    listenOnce(img, EventType_default.LOAD, function() {
      loaded = true;
      if (!decoding) {
        loadHandler();
      }
    })
  ];
  if (img.src && IMAGE_DECODE) {
    decoding = true;
    img.decode().then(function() {
      if (listening) {
        loadHandler();
      }
    }).catch(function(error) {
      if (listening) {
        if (loaded) {
          loadHandler();
        } else {
          errorHandler();
        }
      }
    });
  } else {
    listenerKeys.push(listenOnce(img, EventType_default.ERROR, errorHandler));
  }
  return function unlisten() {
    listening = false;
    listenerKeys.forEach(unlistenByKey);
  };
}
var Image_default = ImageWrapper;

export {
  ImageBase_default,
  listenImage,
  Image_default
};
//# sourceMappingURL=chunk-VBGHCQKT.js.map
